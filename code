#include <bits/stdc++.h> 
using namespace std;
bool safe(vector<vector<int>> &board,int x, int y, int val)
{
    for(int i = 0;i<board.size();i++)
    {
        //check if value is already present in row 
        if(board[x][i] == val)
        {
            return false;
        }
        //check if value is already present in column
        if(board[i][y] == val)
        {
            return false;
        }
        //check if value is already present in 3X3 cell
        if(board[3*(x/3) +i/3][3*(y/3) + i%3] == val){
            return false;
        }
    }
    return true;
}
bool solve(vector<vector<int>> & board)
{
    int n = board.size();
    for(int row = 0; row<n; row++)
    {
        for(int col=0 ; col < n; col++)
        {
            //check for empty cell
            if(board[row][col] == 0)
            {
                for(int val = 1; val <= 9 ; val++)
                {
                    //check if it agrees condition of sudoku then put value
                    if(safe(board, row, col, val))
                    {
                        board[row][col] = val;
                        //solving recursively
                       bool nextsol = solve(board);
                       //check if getting solution by keeping the value
                       //if we get solution then return true else do backtracking and keep next value
                        if(nextsol)
                        {
                            return true;
                        }
                        else{
                            //backtracking
                            board[row][col] = 0;
                        }
                    }
                }
                return false;
            }
            
        }
    }
     return true;
}
void solveSudoku(vector<vector<int>>& sudoku)
{
	solve(sudoku);
}

int main()
{
    vector<vector<int>> sudoku;
    vector <int> temp;
    int num;
    //Enter the question for sudoku
    for(int i = 0;i<9;i++)
    {
        for(int j = 0; j<9;j++)
        {
            cin>>num;
            temp.push_back(num);

        }
        sudoku.push_back(temp);
        temp.clear();
    }
    //calling fucntion to solve sudoku
    solveSudoku(sudoku);
    cout<<"Solution for Sudoku puzzle is:"<<endl;
    //printing solved sudoku
     for(int i = 0 ;i<9;i++)
    {
        for(int j = 0;j<9;j++)
        {
            cout<<sudoku[i][j]<<" ";
        }
        cout<<endl;
    }
}


//for verification
// question 1
// 3 0 6 5 0 8 4 0 0
// 5 2 0 0 0 0 0 0 0
// 0 8 7 0 0 0 0 3 1
// 0 0 3 0 1 0 0 8 0
// 9 0 0 8 6 3 0 0 5
// 0 5 0 0 9 0 6 0 0
// 1 3 0 0 0 0 2 5 0
// 0 0 0 0 0 0 0 7 4
// 0 0 5 2 0 6 3 0 0
// answer 1
// 3 1 6 5 7 8 4 9 2 
// 5 2 9 1 3 4 7 6 8 
// 4 8 7 6 2 9 5 3 1 
// 2 6 3 4 1 5 9 8 7 
// 9 7 4 8 6 3 1 2 5 
// 8 5 1 7 9 2 6 4 3 
// 1 3 8 9 4 7 2 5 6 
// 6 9 2 3 5 1 8 7 4 
// 7 4 5 2 8 6 3 1 9 

// question 2
// 5 0 8 4 0 2 0 0 1                             
// 3 0 0 9 5 1 0 7 8 
// 1 0 0 6 0 0 0 0 5 
// 0 3 4 0 8 9 0 2 0               
// 0 0 0 1 2 3 0 9 7
// 0 1 9 7 4 6 0 0 3
// 0 0 1 0 0 0 0 6 0
// 0 2 6 8 0 0 0 0 4
// 0 7 0 0 0 0 0 1 0
// answer 2
// 5 6 8 4 7 2 9 3 1 
// 3 4 2 9 5 1 6 7 8 
// 1 9 7 6 3 8 2 4 5 
// 7 3 4 5 8 9 1 2 6 
// 6 8 5 1 2 3 4 9 7 
// 2 1 9 7 4 6 5 8 3 
// 8 5 1 3 9 4 7 6 2 
// 9 2 6 8 1 7 3 5 4 
// 4 7 3 2 6 5 8 1 9 
